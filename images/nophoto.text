<!DOCTYPE html>
<html lang="ar" dir="rtl">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>شهداء فلسطين الأبرار</title>
    
    <link rel="preconnect" href="https://fonts.googleapis.com">
    <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin>
    <link href="https://fonts.googleapis.com/css2?family=Tajawal:wght@400;700;900&display=swap" rel="stylesheet">

    <style>
        body { font-family: 'Tajawal', sans-serif; background-color: #f0f2f5; color: #333; margin: 0; padding: 0; text-align: center; }
        header { background-color: #1a2a3a; color: white; padding: 15px 20px; border-bottom: 4px solid #4a90e2; display: flex; justify-content: space-between; align-items: center; position: sticky; top: 0; z-index: 999; box-shadow: 0 4px 10px rgba(0,0,0,0.1); }
        header h1 { margin: 0; font-size: 1.8em; }
        .controls-container { padding: 15px; background-color: #e9ecef; border-bottom: 1px solid #ddd; display: flex; justify-content: center; gap: 15px; flex-wrap: wrap; }
        .control-btn { background-color: #007bff; color: white; border: none; padding: 10px 20px; font-family: 'Tajawal', sans-serif; font-size: 1em; font-weight: bold; border-radius: 8px; cursor: pointer; transition: background-color 0.3s, transform 0.2s; display: inline-flex; align-items: center; gap: 8px; }
        .control-btn:hover { transform: translateY(-2px); }
        #clear-cache-btn { background-color: #dc3545; }
        .stats-container { background-color: #f8f9fa; padding: 20px; display: flex; justify-content: space-around; align-items: center; flex-wrap: wrap; gap: 20px; border-bottom: 1px solid #ddd; margin-bottom: 40px; }
        .stat-item { display: flex; flex-direction: column; align-items: center; }
        .stat-icon svg { width: 48px; height: 48px; fill: #343a40; }
        .stat-label { font-size: 1em; color: #555; margin-top: 5px; }
        .stat-count { font-size: 2em; font-weight: 900; color: #1a2a3a; }
        .gallery-container { display: grid; grid-template-columns: repeat(auto-fit, minmax(280px, 1fr)); gap: 40px; padding: 20px; max-width: 1300px; margin: 0 auto; min-height: 200px; }
        .scene { width: 100%; height: 420px; perspective: 1000px; }
        .martyr-card { width: 100%; height: 100%; position: relative; transform-style: preserve-3d; transition: transform 0.7s cubic-bezier(0.25, 0.46, 0.45, 0.94); cursor: pointer; }
        .scene.active .martyr-card, .scene:hover .martyr-card { transform: rotateY(10deg) scale(1.05); }
        .image-frame { position: absolute; width: 100%; height: 100%; background: linear-gradient(145deg, #e6e6e6, #ffffff); border-radius: 15px; box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2), inset 0 0 15px rgba(0, 0, 0, 0.3); display: flex; flex-direction: column; overflow: hidden; }
        .image-container { width: calc(100% - 20px); height: 75%; margin: 10px; position: relative; border-radius: 8px; overflow: hidden; box-shadow: 0 5px 15px rgba(0,0,0,0.2); }
        .martyr-card img { width: 100%; height: 100%; object-fit: cover; display: block; transition: opacity 0.4s ease-in-out; opacity: 0; }
        .martyr-card img.loaded { opacity: 1; }
        .name-container { height: 25%; position: relative; display: flex; flex-direction: column; justify-content: center; align-items: center; padding: 0 10px; }
        .martyr-name { font-size: 1.5em; font-weight: 900; color: #1a2a3a; margin: 0; }
        .final-message { font-size: 1.1em; color: #d9534f; font-weight: bold; margin-top: 5px; opacity: 0; transition: opacity 0.4s ease 0.2s; }
        .scene.active .final-message, .scene:hover .final-message { opacity: 1; }
        footer { margin-top: 40px; padding: 20px; background-color: #1a2a3a; color: white; }
        .modal-overlay { position: fixed; top: 0; left: 0; width: 100%; height: 100%; background: rgba(0, 0, 0, 0.85); display: none; justify-content: center; align-items: center; z-index: 1000; opacity: 0; transition: opacity 0.5s; }
        .modal-overlay.active { display: flex; opacity: 1; }
        .modal-content { background: #fff; padding: 30px; border-radius: 15px; box-shadow: 0 15px 40px rgba(0,0,0,0.5); position: relative; width: 90%; max-width: 500px; text-align: center; }
        .modal-content img { max-width: 100%; height: auto; max-height: 60vh; border-radius: 10px; margin-bottom: 20px; border: 2px solid #ddd; object-fit: contain; }
        .modal-content h2 { font-size: 2em; color: #1a2a3a; margin: 10px 0; }
        .modal-content p { font-size: 1.2em; color: #d9534f; font-weight: bold; }
        .close-modal { position: absolute; top: 10px; left: 20px; font-size: 3em; color: #aaa; cursor: pointer; }
        #notification-bell { position: relative; cursor: pointer; }
        #notification-bell svg { width: 32px; height: 32px; fill: #fff; }
        #notification-badge { position: absolute; top: -5px; right: -8px; background-color: #d9534f; color: white; width: 22px; height: 22px; border-radius: 50%; font-size: 0.9em; font-weight: bold; display: none; justify-content: center; align-items: center; border: 2px solid #1a2a3a; }
        #notification-modal .modal-content ul { list-style: none; padding: 0; text-align: right; max-height: 60vh; overflow-y: auto;}
        #notification-modal .notification-item { padding: 15px; border-bottom: 1px solid #eee; display: flex; gap: 15px;}
        #notification-modal .sender-img { width: 50px; height: 50px; border-radius: 50%; object-fit: cover; }
        #toast { position: fixed; bottom: -100px; left: 50%; transform: translateX(-50%); background: linear-gradient(135deg, #333, #555); color: white; padding: 15px 25px; border-radius: 10px; box-shadow: 0 10px 25px rgba(0,0,0,0.4); z-index: 2000; transition: all 0.6s cubic-bezier(0.68, -0.55, 0.27, 1.55); border-top: 3px solid #ffc107; font-size: 1.1em; }
        #toast.show { bottom: 30px; }
    </style>
</head>
<body>
    
    <header>
        <h1>شهداء فلسطين الأبرار</h1>
        <div id="notification-bell">
            <svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M12 22c1.1 0 2-.9 2-2h-4c0 1.1.9 2 2 2zm6-6v-5c0-3.07-1.63-5.64-4.5-6.32V4c0-.83-.67-1.5-1.5-1.5s-1.5.67-1.5 1.5v.68C7.64 5.36 6 7.92 6 11v5l-2 2v1h16v-1l-2-2z"/></svg>
            <span id="notification-badge"></span>
        </div>
    </header>

    <div class="controls-container">
        <button id="refresh-btn" class="control-btn"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M17.65 6.35C16.2 4.9 14.21 4 12 4c-4.42 0-7.99 3.58-7.99 8s3.57 8 7.99 8c3.73 0 6.84-2.55 7.73-6h-2.08c-.82 2.33-3.04 4-5.65 4-3.31 0-6-2.69-6-6s2.69-6 6-6c1.66 0 3.14.69 4.22 1.78L13 11h7V4l-2.35 2.35z"/></svg><span>تحديث شامل</span></button>
        <button id="clear-cache-btn" class="control-btn"><svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24"><path fill="currentColor" d="M6 19c0 1.1.9 2 2 2h8c1.1 0 2-.9 2-2V7H6v12zM19 4h-3.5l-1-1h-5l-1 1H5v2h14V4z"/></svg><span>مسح الصور فقط</span></button>
    </div>

    <section class="stats-container">
        <!-- Stats items remain the same -->
    </section>

    <main>
        <div id="martyrs-gallery" class="gallery-container">
             <p id="loading-message">يتم الآن تحميل أسماء وصور الشهداء...</p>
        </div>
    </main>

    <footer><p>رحم الله شهداءنا وأسكنهم فسيح جناته</p></footer>

    <!-- Modals remain the same -->

    <script>
        // --- CONFIGURATION ---
        const GITHUB_USERNAME = "hassanoooohcu";
        const GITHUB_REPO = "palestine-martyrs-gallery";
        const RAW_GITHUB_BASE = `https://raw.githubusercontent.com/${GITHUB_USERNAME}/${GITHUB_REPO}/main`;
        
        const apiUrl = `https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO}/contents/images`;
        const noPhotoListUrl = `${RAW_GITHUB_BASE}/images/nophoto.text`;
        const NO_PHOTO_IMAGE_URL = `${RAW_GITHUB_BASE}/images/nophoto.jpg`;
        const messagesUrl = `${RAW_GITHUB_BASE}/images/messages.txt`;

        let lastMessagesTxt = "";

        const galleryContainer = document.getElementById('martyrs-gallery');
        if ('serviceWorker' in navigator) { window.addEventListener('load', () => { navigator.serviceWorker.register('./sw.js').catch(err => console.error('SW registration failed:', err)); }); }
        
        function showToast(message) { /* ... same as before ... */ }
        function formatBytes(bytes, decimals = 2) { /* ... same as before ... */ }
        function parseMartyrInfo(nameString) { /* ... same as before ... */ }
        function normalizeName(name) { /* ... same as before ... */ }

        // --- CORE LOGIC ---
        let imageObserver;
        function initImageObserver() { /* ... same as before ... */ }
        async function fetchMartyrsData(forceNetwork) { /* ... same as before ... */ }
        function processAndCombineData(data) { /* ... same as before (with sorting) ... */ }
        function renderGallery(martyrs) { /* ... same as before ... */ }
        function buildMartyrCard(martyr) { /* ... same as before ... */ }
        async function main(force = false) { /* ... same as before ... */ }
        async function applyNotifications() { /* ... same as before ... */ }
        function startNotificationMonitoring() { /* ... same as before ... */ }

        // --- وظائف المسح الجديدة ---

        // 1. وظيفة المسح الشامل "الحادة" (لزر التحديث الشامل)
        async function performHardReset(actionMessage) {
            showToast(actionMessage);
            try {
                sessionStorage.clear();
                localStorage.clear();
                console.log("تم مسح التخزين المحلي والجلسة.");

                if (window.caches) {
                    const keys = await caches.keys();
                    for (const key of keys) {
                        await caches.delete(key);
                        console.log(`تم حذف الكاش: ${key}`);
                    }
                }
                if ('serviceWorker' in navigator) {
                    const registrations = await navigator.serviceWorker.getRegistrations();
                    for (const registration of registrations) {
                        await registration.unregister();
                        console.log(`تم إلغاء تسجيل Service Worker: ${registration.scope}`);
                    }
                }
                setTimeout(() => {
                    showToast("اكتمل المسح. جاري إعادة تشغيل الصفحة...");
                    window.location.reload(true);
                }, 2500);

            } catch (err) {
                console.error("فشل في عملية المسح الشامل:", err);
                showToast("⚠️ حدث خطأ أثناء المسح. يرجى إعادة تحميل الصفحة يدويًا.");
            }
        }

        // 2. وظيفة المسح الدقيق للصور فقط (لزر مسح الصور)
        function clearImageCacheAndReload() {
            if (!('serviceWorker' in navigator && navigator.serviceWorker.controller)) {
                showToast('Service Worker غير جاهز بعد. يرجى المحاولة بعد لحظات.');
                return;
            }

            showToast('جاري مسح كاش الصور...');
            
            // إرسال الأمر الجديد المخصص للـ Service Worker
            navigator.serviceWorker.controller.postMessage({ action: 'clear_image_cache' });

            // الاستماع لرسالة التأكيد
            navigator.serviceWorker.addEventListener('message', function handler(event) {
                if (event.data && event.data.status === 'image_cache_cleared') {
                    showToast('تم مسح الصور بنجاح. سيتم إعادة تحميل الصفحة...');
                    setTimeout(() => {
                        window.location.reload();
                    }, 1500);
                    navigator.serviceWorker.removeEventListener('message', handler);
                }
            });
        }

        function setupEventListeners() {
            document.getElementById('refresh-btn').addEventListener('click', () => {
                performHardReset("بدء التحديث الشامل...");
            });
            
            document.getElementById('clear-cache-btn').addEventListener('click', () => {
                clearImageCacheAndReload();
            });
            
            const imageModal = document.getElementById('image-modal');
            galleryContainer.addEventListener('click', (event) => { /* ... same as before ... */ });

            document.addEventListener('click', (event) => { /* ... same as before ... */ });
            document.getElementById('notification-bell').addEventListener('click', () => { /* ... same as before ... */ });
            document.querySelectorAll('.modal-overlay').forEach(overlay => { /* ... same as before ... */ });
        }
        
        // --- INITIALIZATION ---
        document.addEventListener('DOMContentLoaded', () => {
            initImageObserver();
            setupEventListeners();
            main(false);
            applyNotifications();
            startNotificationMonitoring();
        });

        // --- Re-paste unchanged functions here to have full code ---
        // (The functions marked with /* ... same as before ... */ should be pasted here in full)
        
        function showToast(message) {
            document.querySelectorAll('#toast').forEach(t => t.remove());
            const toast = document.createElement('div');
            toast.id = 'toast';
            toast.textContent = message;
            document.body.appendChild(toast);
            setTimeout(() => toast.classList.add('show'), 50);
            setTimeout(() => {
                toast.classList.remove('show');
                setTimeout(() => toast.remove(), 500);
            }, 5000);
        }

        function formatBytes(bytes, decimals = 2) {
            if (!bytes || bytes === 0) return '0 Bytes';
            const k = 1024;
            const i = Math.floor(Math.log(bytes) / Math.log(k));
            return parseFloat((bytes / Math.pow(k, i)).toFixed(decimals)) + ' ' + ['Bytes','KB','MB','GB'][i];
        }

        function parseMartyrInfo(nameString) {
            let cleanName = decodeURIComponent(nameString).replace(/_/g, ' ').replace(/\.[^/.]+$/, "").trim();
            let type = 'male';
            if (cleanName.includes('الطفل') || cleanName.includes('الطفلة')) type = 'child';
            else if (cleanName.includes('الشهيدة')) type = 'female';
            return { name: cleanName, type };
        }

        function normalizeName(name) {
            return name.replace(/^(الشهيد|الشهيدة|الطفل|الطفلة)\s*/, '').replace(/\s+/g, ' ').trim();
        }

        function initImageObserver() {
            if (imageObserver) imageObserver.disconnect();
            imageObserver = new IntersectionObserver((entries, observer) => {
                entries.forEach(entry => {
                    if (entry.isIntersecting) {
                        const img = entry.target;
                        img.src = img.dataset.src;
                        img.onload = () => img.classList.add('loaded');
                        observer.unobserve(img);
                    }
                });
            }, { rootMargin: '0px 0px 200px 0px' });
        }

        async function fetchMartyrsData(forceNetwork) {
            const cacheKey = 'martyrs_api_data';
            const cachedData = sessionStorage.getItem(cacheKey);
            if (cachedData && !forceNetwork) {
                return JSON.parse(cachedData);
            }
            try {
                const fetchOptions = { cache: 'no-cache' };
                const [apiResponse, noPhotoResponse] = await Promise.all([
                    fetch(`${apiUrl}?t=${Date.now()}`, fetchOptions),
                    fetch(`${noPhotoListUrl}?t=${Date.now()}`, fetchOptions)
                ]);

                if (!apiResponse.ok) throw new Error(`API Error: ${apiResponse.statusText}`);
                const files = await apiResponse.json();
                
                let noPhotoNames = [];
                if (noPhotoResponse.ok) {
                    const text = await noPhotoResponse.text();
                    noPhotoNames = text.split('\n').map(n => n.trim()).filter(Boolean);
                }
                const dataToStore = { files, noPhotoNames };
                sessionStorage.setItem(cacheKey, JSON.stringify(dataToStore));
                return dataToStore;

            } catch (error) {
                console.error("Failed to fetch martyrs data:", error);
                if (cachedData) {
                    showToast('فشل التحديث، تم عرض البيانات القديمة.');
                    return JSON.parse(cachedData);
                }
                throw error;
            }
        }

        function processAndCombineData(data) {
            const allMartyrsMap = new Map();
            const imageFiles = (data.files || []).filter(f => f.type === 'file' && /\.(jpg|jpeg|png|gif|jfif|webp|bmp)$/i.test(f.name));

            (data.noPhotoNames || []).forEach(name => {
                const info = parseMartyrInfo(name);
                const normalized = normalizeName(info.name);
                if (normalized) {
                    allMartyrsMap.set(normalized, { ...info, image: NO_PHOTO_IMAGE_URL, size: 0 });
                }
            });

            imageFiles.forEach(file => {
                const info = parseMartyrInfo(file.name);
                const normalized = normalizeName(info.name);
                if (normalized) {
                    allMartyrsMap.set(normalized, { ...info, image: `${RAW_GITHUB_BASE}/images/${file.name}`, size: file.size });
                }
            });

            const martyrsWithImages = [];
            const martyrsWithoutImages = [];

            allMartyrsMap.forEach(martyr => {
                if (martyr.image === NO_PHOTO_IMAGE_URL) {
                    martyrsWithoutImages.push(martyr);
                } else {
                    martyrsWithImages.push(martyr);
                }
            });
            
            return martyrsWithImages.concat(martyrsWithoutImages);
        }

        function renderGallery(martyrs) {
            const loadingMsgEl = document.getElementById('loading-message');
            if (loadingMsgEl) loadingMsgEl.style.display = 'none';

            galleryContainer.innerHTML = '';
            if (!martyrs || martyrs.length === 0) {
                galleryContainer.innerHTML = '<p>لم يتم العثور على شهداء.</p>';
                return;
            }

            const fragment = document.createDocumentFragment();
            let counters = { male: 0, female: 0, child: 0 };
            let totalSizeBytes = 0;

            martyrs.forEach(martyr => {
                counters[martyr.type]++;
                totalSizeBytes += martyr.size || 0;
                fragment.appendChild(buildMartyrCard(martyr));
            });
            
            galleryContainer.appendChild(fragment);
            galleryContainer.querySelectorAll('img[data-src]').forEach(img => imageObserver.observe(img));
            document.getElementById('total-size').textContent = formatBytes(totalSizeBytes);
            document.getElementById('male-count').textContent = counters.male;
            document.getElementById('female-count').textContent = counters.female;
            document.getElementById('child-count').textContent = counters.child;
        }

        function buildMartyrCard(martyr) {
            const scene = document.createElement('div');
            scene.className = 'scene';
            let messageText;
            switch (martyr.type) {
                case 'female': messageText = 'ضحت بحياتها فداءً لوطنها'; break;
                case 'child': messageText = 'قُدّمت طفولته فداءً لوطنه'; break;
                default: messageText = 'ضحى بحياته فداءً لوطنه'; break;
            }
            scene.innerHTML = `<div class="martyr-card"><div class="image-frame"><div class="image-container"><img data-src="${martyr.image}" alt="صورة ${martyr.name}" loading="lazy"></div><div class="name-container"><p class="martyr-name">${martyr.name}</p><p class="final-message">${messageText}</p></div></div></div>`;
            return scene;
        }

        async function main(force = false) {
             try {
                const data = await fetchMartyrsData(force);
                renderGallery(processAndCombineData(data));
            } catch (error) {
                const loadingMsgEl = document.getElementById('loading-message');
                if (loadingMsgEl) loadingMsgEl.textContent = 'فشل تحميل البيانات. الرجاء المحاولة لاحقاً.';
                console.error("Main function failed:", error);
            }
        }

        async function applyNotifications() {
            if (!navigator.onLine) return;
            try {
                const response = await fetch(`${messagesUrl}?t=${Date.now()}`, { cache: 'no-cache' });
                if (!response.ok) return;
                const messagesText = await response.text();
                if (messagesText === lastMessagesTxt) return;
                lastMessagesTxt = messagesText;
                const badge = document.getElementById('notification-badge'), list = document.getElementById('notification-list');
                const notifications = messagesText.split('\n').filter(l => l.trim().length > 5);
                
                if (notifications.length > 0) {
                    badge.textContent = notifications.length; badge.style.display = 'flex';
                    list.innerHTML = notifications.map(n => {
                        const [sender, ...messageParts] = n.split(':');
                        const message = messageParts.join(':').trim();
                        return `<li class="notification-item"><img src="${RAW_GITHUB_BASE}/images/hsn1.png" class="sender-img" alt="Sender"><div><b>${sender.trim()}:</b> ${message}</div></li>`;
                    }).join('');
                } else {
                    badge.style.display = 'none';
                    list.innerHTML = '<li>لا توجد إشعارات جديدة.</li>';
                }
            } catch(e) { console.error("Error fetching notifications:", e); }
        }

        function startNotificationMonitoring() {
            setInterval(applyNotifications, 60000);
        }
    </script>
</body>
</html>
